/**
 * Extrae información detallada del texto del comprobante
 * @param {string} text - Texto extraído del comprobante
 * @param {object} [customPatterns] - Patrones personalizados por negocio
 * @returns {object} - Información extraída del comprobante
 */
function extractRUCAndAmount(text, customPatterns = {}) {
  // Patrones para RUC
  const rucPatterns = customPatterns.rucPatterns || [
    /R\.U\.C\.\s*:?\s*([0-9]{11})/i,
    /RUC\s*:?\s*([0-9]{11})/i,
    /R\.U\.C\.?\s*([0-9]{11})/i,
  ];

  // Patrones para número de comprobante (factura/boleta)
  const invoiceNumberPatterns = customPatterns.invoiceNumberPatterns || [
    /(?:Factura|Boleta|Ticket|Comprobante)\s*(?:N[°o]?|No\.?|#|:)\s*([A-Z0-9\-]{4,})/i,
    /N[°o]?\s*([A-Z0-9\-]{4,})/i,
    /([FBT][A-Z0-9\-]{3,})/i,
    /TICKET\s*:?.*([A-Z0-9\-]+)/i,
    /DOCUMENTO\s*:?.*([A-Z0-9\-]+)/i,
    /N°\s*:?.*([A-Z0-9\-]+)/i,
    /NRO\.?\s*:?.*([A-Z0-9\-]+)/i,
  ];

  // Patrones para monto total
  const amountPatterns = [
    /TOTAL\s+SOLES\s+S\/\s*([0-9]+[.,][0-9]{2})/i,
    /TOTAL\s+DEL\s+TICKET\s*:?\s*S\/\.?\s*([0-9]+[.,][0-9]{2})/i,
    /TOTAL\s+VENTA\s*:?\s*S\/\.?\s*([0-9]+[.,][0-9]{2})/i,
    /IMPORTE\s+TOTAL\s*:?\s*S\/\.?\s*([0-9]+[.,][0-9]{2})/i,
    /TOTAL\s*:?\s*S\/\s*([0-9]+[.,][0-9]{2})/i,
    /TOTAL\s*:?\s*S\/\.?\s*([0-9]+[.,][0-9]{2})/i,
    /TOTAL\s*:?\s*([0-9]+[.,][0-9]{2})/i,
    /IMPORTE\s*:?\s*S\/\.?\s*([0-9]+[.,][0-9]{2})/i,
    /S\/\s*([0-9]+[.,][0-9]{2})\s*(SOLES|PEN|S\.|$)/i,
    /SON\s*:?\s*(.+?)\s+CON\s+([0-9]{2})\/100\s+SOLES/i,
  ];

  // Patrones para razón social
  const businessNamePatterns = [
    /RAZON SOCIAL\s*:?\s*(.+?)(?=\n|$)/i,
    /NOMBRE COMERCIAL\s*:?\s*(.+?)(?=\n|$)/i,
    /DENOMINACION\s*:?\s*(.+?)(?=\n|$)/i,
  ];

  // Variables para almacenar la información extraída
  let ruc = null;
  let amount = null;
  let amountInWords = null;
  let businessName = null;
  let businessSlug = "default";
  let address = null;
  let vendor = null;
  let items = [];
  let location = null;
  let purchaseDate = null;
  let invoiceNumber = null;

  // Buscar RUC
  for (const pattern of rucPatterns) {
    const match = text.match(pattern);
    if (match) {
      ruc = match[1];
      break;
    }
  }

  // Buscar número de comprobante
  for (const pattern of invoiceNumberPatterns) {
    const match = text.match(pattern);
    if (match && match[1]) {
      invoiceNumber = match[1].trim();
      break;
    }
  }

  // Buscar razón social
  for (const pattern of businessNamePatterns) {
    const match = text.match(pattern);
    if (match) {
      businessName = match[1].trim();
      break;
    }
  }

  // Generar slug del negocio basado en el nombre
  if (businessName) {
    const lowerBusinessName = businessName.toLowerCase();
    if (
      lowerBusinessName.includes("la baguette") ||
      lowerBusinessName.includes("labaguette")
    ) {
      businessSlug = "la-baguette";
    } else if (lowerBusinessName.includes("starbucks")) {
      businessSlug = "starbucks";
    } else if (
      lowerBusinessName.includes("tambo") ||
      lowerBusinessName.includes("tambo+")
    ) {
      businessSlug = "tambo";
    } else if (lowerBusinessName.includes("metro")) {
      businessSlug = "metro";
    } else if (lowerBusinessName.includes("wong")) {
      businessSlug = "wong";
    } else if (
      lowerBusinessName.includes("plaza vea") ||
      lowerBusinessName.includes("plazavea")
    ) {
      businessSlug = "plaza-vea";
    } else if (lowerBusinessName.includes("tottus")) {
      businessSlug = "tottus";
    } else {
      businessSlug = businessName
        .toLowerCase()
        .replace(/\s+/g, "-")
        .replace(/[^a-z0-9-]/g, "")
        .replace(/-+/g, "-")
        .replace(/^-|-$/g, "");
    }
  }

  // Buscar monto total
  let importeTotalPattern =
    /Importe\s+Total\s+S\/\s*:?\s*([0-9]+[.,][0-9]{2})/i;
  let importeTotalResult = text.match(importeTotalPattern);
  if (importeTotalResult && importeTotalResult[1]) {
    const cleanAmount = importeTotalResult[1].replace(",", ".");
    amount = parseFloat(cleanAmount);
  }

  if (!amount || isNaN(amount) || amount <= 0) {
    const totalPagarMatch = text.match(
      /Total\s+a\s+Pagar\s+S\/\s*:?\s*([0-9]+[.,][0-9]{2})/i
    );
    if (totalPagarMatch && totalPagarMatch[1]) {
      const cleanAmount = totalPagarMatch[1].replace(",", ".");
      amount = parseFloat(cleanAmount);
    }
  }

  // Buscar el monto en letras
  const amountInWordsMatch = text.match(
    /SON\s*:?\s*(.+?)\s+[YC]\s+([0-9]{2})\/100\s+SOLES/i
  );
  if (amountInWordsMatch) {
    amountInWords = amountInWordsMatch[0].trim();
    const amountWords = amountInWordsMatch[1].trim();
    const amountCents = amountInWordsMatch[2];
    const wordAmount = convertWordsToNumber(amountWords);
    if (wordAmount !== null) {
      amount = wordAmount + parseInt(amountCents) / 100;
    }
  }

  // Retornar la información extraída
  return {
    ruc,
    amount,
    amountInWords,
    businessName,
    businessSlug,
    address,
    vendor,
    items,
    location,
    purchaseDate,
    invoiceNumber,
  };
}

/**
 * Convierte palabras a números (para procesar montos en letras)
 * @param {string} words - Palabras a convertir
 * @returns {number|null} - Número convertido o null si no se pudo convertir
 */
function convertWordsToNumber(words) {
  if (!words) return null;

  const wordValues = {
    cero: 0,
    un: 1,
    uno: 1,
    una: 1,
    dos: 2,
    tres: 3,
    cuatro: 4,
    cinco: 5,
    seis: 6,
    siete: 7,
    ocho: 8,
    nueve: 9,
    diez: 10,
    once: 11,
    doce: 12,
    trece: 13,
    catorce: 14,
    quince: 15,
    dieciseis: 16,
    dieciséis: 16,
    diecisiete: 17,
    dieciocho: 18,
    diecinueve: 19,
    veinte: 20,
    veintiuno: 21,
    veintidos: 22,
    veintidós: 22,
    veintitres: 23,
    veintitrés: 23,
    veinticuatro: 24,
    veinticinco: 25,
    veintiseis: 26,
    veintiséis: 26,
    veintisiete: 27,
    veintiocho: 28,
    veintinueve: 29,
    treinta: 30,
    cuarenta: 40,
    cincuenta: 50,
    sesenta: 60,
    setenta: 70,
    ochenta: 80,
    noventa: 90,
    cien: 100,
    ciento: 100,
    doscientos: 200,
    trescientos: 300,
    cuatrocientos: 400,
    quinientos: 500,
    seiscientos: 600,
    setecientos: 700,
    ochocientos: 800,
    novecientos: 900,
    mil: 1000,
    millón: 1000000,
    millones: 1000000,
  };

  words = words
    .toLowerCase()
    .replace(/ y /g, " ")
    .replace(/á/g, "a")
    .replace(/é/g, "e")
    .replace(/í/g, "i")
    .replace(/ó/g, "o")
    .replace(/ú/g, "u");

  const tokens = words.split(/\s+/);
  let result = 0;
  let currentNumber = 0;

  for (let i = 0; i < tokens.length; i++) {
    const word = tokens[i];
    const value = wordValues[word];
    if (value !== undefined) {
      if (value === 1000 || value === 1000000) {
        if (currentNumber === 0) currentNumber = 1;
        result += currentNumber * value;
        currentNumber = 0;
      } else if (value === 100 && currentNumber !== 0) {
        currentNumber *= value;
      } else {
        currentNumber += value;
      }
    } else if (word.startsWith("veinti") && word.length > 6) {
      const suffix = word.substring(6);
      if (wordValues[suffix] !== undefined) {
        currentNumber += 20 + wordValues[suffix];
      }
    }
  }

  result += currentNumber;

  return result > 0 ? result : null;
}

module.exports = {
  extractRUCAndAmount,
  convertWordsToNumber,
};
