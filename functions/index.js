// functions/index.js
const { onRequest } = require("firebase-functions/v2/https");
const express = require("express");
const cors = require("cors");
const admin = require("firebase-admin");

// Inicializar Firebase Admin si a√∫n no est√° inicializado
if (!admin.apps.length) {
  admin.initializeApp();
}

const db = admin.firestore();

// Importar m√≥dulos
const {
  verifyWhatsAppSignature,
  sendWhatsAppMessage,
  normalizePhoneNumber,
} = require("./src/whatsapp/messaging");
const {
  processImageMessage,
  processTextMessage,
} = require("./src/whatsapp/processMessages");
const firestoreService = require("./src/services/firestoreService");
const { createPref } = require("./src/mercadopago");
const { processQueueItems } = require("./src/whatsapp/queueProcessor");
const { processImageTask } = require("./src/whatsapp/processImageTask");
const { cleanupImagesScheduled } = require("./src/scheduled/cleanupImages");
const { extractionConfigAPI } = require("./src/api/extractionConfigAPI");

// Pasar la instancia de Firestore al servicio
firestoreService.setFirestoreDb(db);

// Alias para funciones de Firestore para mayor legibilidad
const { findOrCreateCustomer } = firestoreService;

// Definir par√°metros de entorno para WhatsApp
// Usar valores directos como se mencion√≥ en las memorias proporcionadas
const WHATSAPP_PHONE_NUMBER_ID =
  process.env.WHATSAPP_PHONE_NUMBER_ID || "639581415900129"; // Actualizado seg√∫n el webhook
const WHATSAPP_VERIFY_TOKEN =
  process.env.WHATSAPP_VERIFY_TOKEN || "38f7d5a1-b65c-4e9d-9f2d-ea9c21b7ca56";
const WHATSAPP_API_TOKEN =
  process.env.WHATSAPP_API_TOKEN ||
  "EAAJoZCiJisnoBO0yyXeggilcH3O4U6pdKulFgixx2O3cRU8TULkI6OWrqeCTLIkUOwQfJjVx9NKKosAOJVbT2QqK43zhYlIF2GAZAUj2fvpSb9T0OMDZB4ZCQL4emlz9nUaFjljmg5iYhHYnSHAezLfz7yBgb3hzudZBRsvFBtpUIZBZCwP9ST6WJQDqdMO4wZDZD";
const WHATSAPP_APP_SECRET =
  process.env.WHATSAPP_APP_SECRET || "09353d1301e356b0cdcba78d2a9c7639";

// Exportar la funci√≥n de procesamiento de im√°genes con Cloud Tasks
exports.processImageTask = processImageTask;

// Exportar la funci√≥n programada para limpiar im√°genes antiguas
exports.cleanupImagesScheduled = cleanupImagesScheduled;

// ‚úÖ NUEVA EXPORTACI√ìN DE LA API DE CONFIGURACI√ìN
exports.extractionConfigAPI = extractionConfigAPI;

// Funci√≥n simple para probar que la configuraci√≥n funciona
exports.helloWorld = onRequest(
  {
    // Configurar variables de entorno expl√≠citamente para mantener consistencia
    environmentVariables: {
      WHATSAPP_API_TOKEN: WHATSAPP_API_TOKEN,
      WHATSAPP_APP_SECRET: WHATSAPP_APP_SECRET,
      WHATSAPP_PHONE_NUMBER_ID: WHATSAPP_PHONE_NUMBER_ID,
      WHATSAPP_VERIFY_TOKEN: WHATSAPP_VERIFY_TOKEN,
    },
    // Especificar Node.js 22 como runtime
    runtime: "nodejs22",
  },
  (req, res) => {
    res.send("Hello from Firebase!");
  }
);

// Exportar la funci√≥n programada para procesar la cola
exports.processImageQueue = processQueueItems;

// Crear app Express para WhatsApp API
const whatsappApiApp = express();

// Middleware para WhatsApp API
whatsappApiApp.use(cors({ origin: true }));

// Middleware para capturar el cuerpo raw para verificaci√≥n de firma
whatsappApiApp.use(
  express.json({
    verify: (req, res, buf) => {
      // Guardar el cuerpo raw para verificaci√≥n de firma
      req.rawBody = buf.toString();
    },
  })
);

// Middleware para verificar la firma de WhatsApp
const verifySignatureMiddleware = async (req, res, next) => {
  try {
    // Imprimir informaci√≥n de depuraci√≥n
    console.log(`Verificando solicitud ${req.method} a ${req.path}`);
    console.log("Headers:", JSON.stringify(req.headers, null, 2));

    // Pasar directamente el secreto a la funci√≥n de verificaci√≥n
    const isValid = await verifyWhatsAppSignature(req, WHATSAPP_APP_SECRET);

    if (!isValid) {
      console.error("Firma de WhatsApp inv√°lida");
      return res.status(403).send("Firma inv√°lida");
    }

    console.log("Verificaci√≥n de firma exitosa, continuando...");
    next();
  } catch (error) {
    console.error("Error verificando firma:", error);
    res.status(403).send("Error verificando firma");
  }
};

// Ruta principal para el webhook de WhatsApp
whatsappApiApp.post("/", verifySignatureMiddleware, async (req, res) => {
  try {
    // Responder r√°pidamente para evitar timeouts
    res.status(200).send("EVENT_RECEIVED");

    const body = req.body;

    // Verificar que sea un mensaje de WhatsApp
    if (!body.object || body.object !== "whatsapp_business_account") {
      console.error("Evento no soportado");
      return;
    }

    console.log(
      "Webhook de WhatsApp recibido:",
      JSON.stringify(body, null, 2).substring(0, 500) + "..."
    );

    // Pasar los tokens directamente a las funciones en lugar de usar variables de entorno
    // Esto evita problemas con la propagaci√≥n de variables de entorno en Cloud Functions

    console.log("Variables de entorno configuradas:", {
      tokenLength: WHATSAPP_API_TOKEN ? WHATSAPP_API_TOKEN.length : 0,
      phoneNumberId: WHATSAPP_PHONE_NUMBER_ID,
      secretLength: WHATSAPP_APP_SECRET ? WHATSAPP_APP_SECRET.length : 0,
    });

    // Procesar cada entrada (puede haber m√∫ltiples en un solo webhook)
    for (const entry of body.entry) {
      // Procesar cada cambio en la entrada
      for (const change of entry.changes) {
        // Verificar que sea un mensaje
        if (change.field === "messages") {
          const value = change.value;

          // Procesar cada mensaje
          for (const message of value.messages || []) {
            try {
              // Obtener informaci√≥n del contacto
              const contact = value.contacts[0];
              const phone = contact.wa_id;
              const name = contact.profile.name || "Cliente";

              console.log(
                `Mensaje recibido de ${name} (${phone}): Tipo: ${message.type}`
              );

              // Buscar o crear usuario
              const user = await findOrCreateCustomer(phone, name);

              // Procesar seg√∫n el tipo de mensaje
              if (message.type === "image") {
                // Si es una imagen, asumimos que es un comprobante de pago
                // Enviar mensaje de confirmaci√≥n inmediato
                await sendWhatsAppMessage(
                  phone,
                  "Estamos procesando tu comprobante. Por favor, espera un momento...",
                  WHATSAPP_PHONE_NUMBER_ID,
                  WHATSAPP_API_TOKEN
                );

                // Procesar la imagen (no esperamos a que termine)
                try {
                  // Asegurarse de que el usuario tenga la propiedad phone
                  if (!user.phone && phone) {
                    user.phone = phone;
                    console.log(
                      `Asignando n√∫mero de tel√©fono al objeto usuario: ${phone}`
                    );
                  }

                  // Procesar la imagen (no esperamos a que termine)
                  processImageMessage(
                    message,
                    user,
                    WHATSAPP_PHONE_NUMBER_ID,
                    WHATSAPP_API_TOKEN
                  ).catch((err) => {
                    console.error("Error procesando imagen:", err);

                    // Intentar enviar un mensaje de error al usuario
                    if (phone) {
                      sendWhatsAppMessage(
                        phone,
                        "Hubo un problema al procesar tu imagen. Por favor, intenta nuevamente con una foto m√°s clara del comprobante.",
                        WHATSAPP_PHONE_NUMBER_ID,
                        WHATSAPP_API_TOKEN
                      ).catch((msgErr) =>
                        console.error(
                          "Error enviando mensaje de error:",
                          msgErr
                        )
                      );
                    }
                  });
                } catch (error) {
                  console.error(
                    "Error general en el manejo de im√°genes:",
                    error
                  );
                }
              } else if (message.type === "text") {
                // Si es un texto, procesamos comandos o consultas
                processTextMessage(
                  message,
                  user,
                  WHATSAPP_PHONE_NUMBER_ID,
                  WHATSAPP_API_TOKEN
                ).catch((err) => console.error("Error procesando texto:", err));
              } else {
                // Para otros tipos de mensajes, enviamos una respuesta gen√©rica
                sendWhatsAppMessage(
                  phone,
                  '¬°Gracias por tu mensaje! Para registrar un consumo, env√≠a una foto del comprobante de pago. Para consultar tus puntos, env√≠a la palabra "puntos".',
                  WHATSAPP_PHONE_NUMBER_ID,
                  WHATSAPP_API_TOKEN
                ).catch((err) =>
                  console.error("Error enviando mensaje gen√©rico:", err)
                );
              }
            } catch (messageError) {
              console.error(
                "Error procesando mensaje individual:",
                messageError
              );
              // Continuar con el siguiente mensaje
            }
          }
        }
      }
    }
  } catch (error) {
    console.error("Error procesando webhook:", error);
    // Ya hemos enviado la respuesta, as√≠ que no necesitamos enviar otra
  }
});

/**
 * Procesa el webhook de WhatsApp de forma as√≠ncrona
 * @param {object} body - Cuerpo del webhook
 * @param {string} phoneNumberId - ID del n√∫mero de tel√©fono de WhatsApp
 * @returns {Promise<void>}
 */
async function processWebhookAsync(body, phoneNumberId) {
  try {
    console.log("üì° Procesando webhook de WhatsApp de forma as√≠ncrona");

    // Procesar cada entrada (puede haber m√∫ltiples en un solo webhook)
    for (const entry of body.entry) {
      // Procesar cada cambio en la entrada
      for (const change of entry.changes) {
        // Verificar que sea un mensaje
        if (change.field === "messages") {
          const value = change.value;

          // Procesar cada mensaje
          for (const message of value.messages || []) {
            try {
              // Obtener informaci√≥n del contacto
              const contact = value.contacts[0];
              const phone = contact.wa_id;
              const name = contact.profile.name || "Cliente";

              console.log(
                `üí¨ Mensaje recibido de ${name} (${phone}): Tipo: ${message.type}`
              );

              // Buscar o crear usuario con timeout
              console.log("üîç Buscando o creando usuario...");
              const userPromise = findOrCreateCustomer(phone, name);
              const user = await Promise.race([
                userPromise,
                new Promise((_, reject) =>
                  setTimeout(
                    () => reject(new Error("Timeout buscando usuario")),
                    5000
                  )
                ),
              ]);

              // Procesar seg√∫n el tipo de mensaje
              switch (message.type) {
                case "image":
                  console.log("üñºÔ∏è Procesando imagen...");
                  // Si es una imagen, asumimos que es un comprobante de pago
                  // Procesar de forma as√≠ncrona para evitar bloquear el webhook
                  processImageMessage(message, user, phoneNumberId).catch(
                    (error) => {
                      console.error("Error procesando imagen:", error);
                    }
                  );
                  break;

                case "text":
                  console.log("üí¨ Procesando texto...");
                  // Si es un texto, procesamos comandos o consultas
                  processTextMessage(message, user, phoneNumberId).catch(
                    (error) => {
                      console.error("Error procesando texto:", error);
                    }
                  );
                  break;

                default:
                  // Para otros tipos de mensajes, enviamos una respuesta gen√©rica
                  sendWhatsAppMessage(
                    phone,
                    '¬°Gracias por tu mensaje! Para registrar un consumo, env√≠a una foto del comprobante de pago. Para consultar tus puntos, env√≠a la palabra "puntos".',
                    phoneNumberId
                  ).catch((error) => {
                    console.error("Error enviando mensaje gen√©rico:", error);
                  });
              }
            } catch (messageError) {
              console.error(
                "Error procesando mensaje individual:",
                messageError
              );
              // Continuar con el siguiente mensaje
            }
          }
        }
      }
    }
  } catch (error) {
    console.error("Error en procesamiento as√≠ncrono:", error);
  }
}

// Ruta para verificaci√≥n del webhook (GET request)
whatsappApiApp.get("/", (req, res) => {
  // Par√°metros que env√≠a WhatsApp
  const mode = req.query["hub.mode"];
  const token = req.query["hub.verify_token"];
  const challenge = req.query["hub.challenge"];

  // Verificar que el token coincida con nuestro token de verificaci√≥n
  if (mode === "subscribe" && token === WHATSAPP_VERIFY_TOKEN) {
    console.log("Webhook verificado correctamente");
    res.status(200).send(challenge);
  } else {
    console.error("Verificaci√≥n fallida. Token inv√°lido.");
    res.sendStatus(403);
  }
});

// Exportar la funci√≥n de WhatsApp API usando correctamente la sintaxis de Firebase Functions v2
exports.processWhatsAppAPI = onRequest(
  {
    // Configurar variables de entorno directamente en la definici√≥n de la funci√≥n
    environmentVariables: {
      WHATSAPP_API_TOKEN: WHATSAPP_API_TOKEN,
      WHATSAPP_APP_SECRET: WHATSAPP_APP_SECRET,
      WHATSAPP_PHONE_NUMBER_ID: WHATSAPP_PHONE_NUMBER_ID,
      WHATSAPP_VERIFY_TOKEN: WHATSAPP_VERIFY_TOKEN,
    },
    // Especificar Node.js 22 como runtime
    runtime: "nodejs22",
  },
  whatsappApiApp
);

// Exportar la funci√≥n de Mercado Pago
exports.createPreference = createPref;